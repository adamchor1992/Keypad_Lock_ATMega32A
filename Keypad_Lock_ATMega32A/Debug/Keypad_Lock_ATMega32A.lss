
Keypad_Lock_ATMega32A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000058a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000610  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001433  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a09  00000000  00000000  00001b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a10  00000000  00000000  00002518  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00002f28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c3  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000958  00000000  00000000  000035ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00003f03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	81 00       	.word	0x0081	; ????
  56:	84 00       	.word	0x0084	; ????
  58:	87 00       	.word	0x0087	; ????
  5a:	8a 00       	.word	0x008a	; ????
  5c:	8d 00       	.word	0x008d	; ????
  5e:	90 00       	.word	0x0090	; ????
  60:	93 00       	.word	0x0093	; ????
  62:	96 00       	.word	0x0096	; ????
  64:	99 00       	.word	0x0099	; ????
  66:	9c 00       	.word	0x009c	; ????
  68:	b6 00       	.word	0x00b6	; ????
  6a:	b6 00       	.word	0x00b6	; ????
  6c:	b6 00       	.word	0x00b6	; ????
  6e:	a5 00       	.word	0x00a5	; ????
  70:	a8 00       	.word	0x00a8	; ????
  72:	ab 00       	.word	0x00ab	; ????
  74:	ae 00       	.word	0x00ae	; ????
  76:	b1 00       	.word	0x00b1	; ????
  78:	b4 00       	.word	0x00b4	; ????
  7a:	b6 00       	.word	0x00b6	; ????
  7c:	b6 00       	.word	0x00b6	; ????
  7e:	b6 00       	.word	0x00b6	; ????
  80:	b6 00       	.word	0x00b6	; ????
  82:	b6 00       	.word	0x00b6	; ????
  84:	b6 00       	.word	0x00b6	; ????
  86:	b6 00       	.word	0x00b6	; ????
  88:	b6 00       	.word	0x00b6	; ????
  8a:	b6 00       	.word	0x00b6	; ????
  8c:	b6 00       	.word	0x00b6	; ????
  8e:	b6 00       	.word	0x00b6	; ????
  90:	b6 00       	.word	0x00b6	; ????
  92:	b6 00       	.word	0x00b6	; ????
  94:	b6 00       	.word	0x00b6	; ????
  96:	b6 00       	.word	0x00b6	; ????
  98:	b6 00       	.word	0x00b6	; ????
  9a:	b6 00       	.word	0x00b6	; ????
  9c:	b6 00       	.word	0x00b6	; ????
  9e:	b6 00       	.word	0x00b6	; ????
  a0:	b6 00       	.word	0x00b6	; ????
  a2:	b6 00       	.word	0x00b6	; ????
  a4:	b6 00       	.word	0x00b6	; ????
  a6:	b6 00       	.word	0x00b6	; ????
  a8:	b6 00       	.word	0x00b6	; ????
  aa:	b6 00       	.word	0x00b6	; ????
  ac:	b6 00       	.word	0x00b6	; ????
  ae:	9f 00       	.word	0x009f	; ????
  b0:	a2 00       	.word	0x00a2	; ????

000000b2 <__ctors_end>:
  b2:	11 24       	eor	r1, r1
  b4:	1f be       	out	0x3f, r1	; 63
  b6:	cf e5       	ldi	r28, 0x5F	; 95
  b8:	d8 e0       	ldi	r29, 0x08	; 8
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	cd bf       	out	0x3d, r28	; 61
  be:	0e 94 a4 01 	call	0x348	; 0x348 <main>
  c2:	0c 94 c3 02 	jmp	0x586	; 0x586 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <_ZN7Display8SetDigitEhh>:
#include <avr/io.h>
#include <util/delay.h>	//header containing delay functions

void Display::SetDigit(uint8_t number, uint8_t position)
{
	switch(position)
  ca:	42 30       	cpi	r20, 0x02	; 2
  cc:	59 f0       	breq	.+22     	; 0xe4 <_ZN7Display8SetDigitEhh+0x1a>
  ce:	18 f4       	brcc	.+6      	; 0xd6 <_ZN7Display8SetDigitEhh+0xc>
  d0:	41 30       	cpi	r20, 0x01	; 1
  d2:	31 f0       	breq	.+12     	; 0xe0 <_ZN7Display8SetDigitEhh+0x16>
  d4:	0c c0       	rjmp	.+24     	; 0xee <_ZN7Display8SetDigitEhh+0x24>
  d6:	43 30       	cpi	r20, 0x03	; 3
  d8:	39 f0       	breq	.+14     	; 0xe8 <_ZN7Display8SetDigitEhh+0x1e>
  da:	44 30       	cpi	r20, 0x04	; 4
  dc:	39 f0       	breq	.+14     	; 0xec <_ZN7Display8SetDigitEhh+0x22>
  de:	07 c0       	rjmp	.+14     	; 0xee <_ZN7Display8SetDigitEhh+0x24>
	{
		case 1:
		PORTB &= ~(1<<0);
  e0:	c0 98       	cbi	0x18, 0	; 24
		break;
  e2:	05 c0       	rjmp	.+10     	; 0xee <_ZN7Display8SetDigitEhh+0x24>

		case 2:
		PORTB &= ~(1<<1);
  e4:	c1 98       	cbi	0x18, 1	; 24
		break;
  e6:	03 c0       	rjmp	.+6      	; 0xee <_ZN7Display8SetDigitEhh+0x24>

		case 3:
		PORTB &= ~(1<<2);
  e8:	c2 98       	cbi	0x18, 2	; 24
		break;
  ea:	01 c0       	rjmp	.+2      	; 0xee <_ZN7Display8SetDigitEhh+0x24>

		case 4:
		PORTB &= ~(1<<3);
  ec:	c3 98       	cbi	0x18, 3	; 24
		break;
	}

	switch(number)
  ee:	86 2f       	mov	r24, r22
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	8f 32       	cpi	r24, 0x2F	; 47
  f4:	91 05       	cpc	r25, r1
  f6:	d0 f5       	brcc	.+116    	; 0x16c <_ZN7Display8SetDigitEhh+0xa2>
  f8:	fc 01       	movw	r30, r24
  fa:	e6 5d       	subi	r30, 0xD6	; 214
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__tablejump2__>
	{
		/*Hex codes for common anode 7-segment display setup*/
		case 0:
		PORTA = 0xC0;
 102:	80 ec       	ldi	r24, 0xC0	; 192
 104:	8b bb       	out	0x1b, r24	; 27
		break;
 106:	32 c0       	rjmp	.+100    	; 0x16c <_ZN7Display8SetDigitEhh+0xa2>

		case 1:
		PORTA = 0xF9;
 108:	89 ef       	ldi	r24, 0xF9	; 249
 10a:	8b bb       	out	0x1b, r24	; 27
		break;
 10c:	2f c0       	rjmp	.+94     	; 0x16c <_ZN7Display8SetDigitEhh+0xa2>

		case 2:
		PORTA = 0xA4;
 10e:	84 ea       	ldi	r24, 0xA4	; 164
 110:	8b bb       	out	0x1b, r24	; 27
		break;
 112:	2c c0       	rjmp	.+88     	; 0x16c <_ZN7Display8SetDigitEhh+0xa2>

		case 3:
		PORTA = 0xB0;
 114:	80 eb       	ldi	r24, 0xB0	; 176
 116:	8b bb       	out	0x1b, r24	; 27
		break;
 118:	29 c0       	rjmp	.+82     	; 0x16c <_ZN7Display8SetDigitEhh+0xa2>

		case 4:
		PORTA = 0x99;
 11a:	89 e9       	ldi	r24, 0x99	; 153
 11c:	8b bb       	out	0x1b, r24	; 27
		break;
 11e:	26 c0       	rjmp	.+76     	; 0x16c <_ZN7Display8SetDigitEhh+0xa2>

		case 5:
		PORTA = 0x92;
 120:	82 e9       	ldi	r24, 0x92	; 146
 122:	8b bb       	out	0x1b, r24	; 27
		break;
 124:	23 c0       	rjmp	.+70     	; 0x16c <_ZN7Display8SetDigitEhh+0xa2>

		case 6:
		PORTA = 0x82;
 126:	82 e8       	ldi	r24, 0x82	; 130
 128:	8b bb       	out	0x1b, r24	; 27
		break;
 12a:	20 c0       	rjmp	.+64     	; 0x16c <_ZN7Display8SetDigitEhh+0xa2>
		
		case 7:
		PORTA = 0xF8;
 12c:	88 ef       	ldi	r24, 0xF8	; 248
 12e:	8b bb       	out	0x1b, r24	; 27
		break;
 130:	1d c0       	rjmp	.+58     	; 0x16c <_ZN7Display8SetDigitEhh+0xa2>

		case 8:
		PORTA = 0x80;
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	8b bb       	out	0x1b, r24	; 27
		break;
 136:	1a c0       	rjmp	.+52     	; 0x16c <_ZN7Display8SetDigitEhh+0xa2>

		case 9:
		PORTA = 0x90;
 138:	80 e9       	ldi	r24, 0x90	; 144
 13a:	8b bb       	out	0x1b, r24	; 27
		break;
 13c:	17 c0       	rjmp	.+46     	; 0x16c <_ZN7Display8SetDigitEhh+0xa2>
		
		case '-':      // display '-'
		PORTA = 0xBF;
 13e:	8f eb       	ldi	r24, 0xBF	; 191
 140:	8b bb       	out	0x1b, r24	; 27
		break;
 142:	14 c0       	rjmp	.+40     	; 0x16c <_ZN7Display8SetDigitEhh+0xa2>
		
		case '.':	  // display '.'
		PORTA = 0x7F;
 144:	8f e7       	ldi	r24, 0x7F	; 127
 146:	8b bb       	out	0x1b, r24	; 27
		break;
 148:	11 c0       	rjmp	.+34     	; 0x16c <_ZN7Display8SetDigitEhh+0xa2>
		
		case 13:
		PORTA = 0x3F; // display '-' and '.' simultaneously
 14a:	8f e3       	ldi	r24, 0x3F	; 63
 14c:	8b bb       	out	0x1b, r24	; 27
		break;
 14e:	0e c0       	rjmp	.+28     	; 0x16c <_ZN7Display8SetDigitEhh+0xa2>
		
		case 14:
		PORTA = 0x8C; // letter P
 150:	8c e8       	ldi	r24, 0x8C	; 140
 152:	8b bb       	out	0x1b, r24	; 27
		break;
 154:	0b c0       	rjmp	.+22     	; 0x16c <_ZN7Display8SetDigitEhh+0xa2>
		
		case 15:
		PORTA = 0x86; // letter E
 156:	86 e8       	ldi	r24, 0x86	; 134
 158:	8b bb       	out	0x1b, r24	; 27
		break;
 15a:	08 c0       	rjmp	.+16     	; 0x16c <_ZN7Display8SetDigitEhh+0xa2>
		
		case 16:
		PORTA = 0xC8; // letter N
 15c:	88 ec       	ldi	r24, 0xC8	; 200
 15e:	8b bb       	out	0x1b, r24	; 27
		break;
 160:	05 c0       	rjmp	.+10     	; 0x16c <_ZN7Display8SetDigitEhh+0xa2>
		
		case 17:
		PORTA = 0x88;  //  letter A
 162:	88 e8       	ldi	r24, 0x88	; 136
 164:	8b bb       	out	0x1b, r24	; 27
		break;
 166:	02 c0       	rjmp	.+4      	; 0x16c <_ZN7Display8SetDigitEhh+0xa2>
		
		case 18:
		PORTA = 0xFF;  //display nothing
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	88 ec       	ldi	r24, 0xC8	; 200
 16e:	8a 95       	dec	r24
 170:	f1 f7       	brne	.-4      	; 0x16e <_ZN7Display8SetDigitEhh+0xa4>
	}
}

void Display::Clear()
{
	PORTA = 255;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	8b bb       	out	0x1b, r24	; 27
	PORTB = 255;
 176:	88 bb       	out	0x18, r24	; 24
 178:	08 95       	ret

0000017a <_ZN7Display22SetValueOnWholeDisplayEhPh>:
	_delay_us(600);
	Clear();
}

void Display::SetValueOnWholeDisplay(uint8_t value, uint8_t displayed_values[])
{
 17a:	fa 01       	movw	r30, r20
	for(int i=0; i<4; i++)
	{
		displayed_values[i] = value;
 17c:	60 83       	st	Z, r22
 17e:	61 83       	std	Z+1, r22	; 0x01
 180:	62 83       	std	Z+2, r22	; 0x02
 182:	63 83       	std	Z+3, r22	; 0x03
 184:	08 95       	ret

00000186 <_Z10init_portsv>:

void init_ports(void)
{
	/*----------------------PORTA----------------------*/
	/*All 8 pins of PORTA set as output drive segments of 7 segment display*/
	DDRA = 255;
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0;
 18a:	1b ba       	out	0x1b, r1	; 27

	/*----------------------PORTB----------------------*/
	/*Pins PIN0, PIN1, PIN2, PIN3 of PORTB set as output drive digits of 7 segment display,
	rest of pins of PORTB is unused*/
	DDRB = 0;
 18c:	17 ba       	out	0x17, r1	; 23
	DDRB |= (1 << PIN0) | (1 << PIN1) | (1 << PIN2) | (1 << PIN3);
 18e:	87 b3       	in	r24, 0x17	; 23
 190:	8f 60       	ori	r24, 0x0F	; 15
 192:	87 bb       	out	0x17, r24	; 23
	PORTB = 0;
 194:	18 ba       	out	0x18, r1	; 24

	/*----------------------PORTD----------------------*/
	/*Pins PIN0, PIN1, PIN2, PIN3 of PORTD set as output drive rows of keyboard*/
	DDRD |= (1 << PIN0) | (1 << PIN1) | (1 << PIN2) | (1 << PIN3);
 196:	81 b3       	in	r24, 0x11	; 17
 198:	8f 60       	ori	r24, 0x0F	; 15
 19a:	81 bb       	out	0x11, r24	; 17
	/*Pins PIN4, PIN5, PIN6, PIN7 of PORTD set as input control columns of keyboard*/
	DDRD |= (0 << PIN4) | (0 << PIN5) | (0 << PIN6) | (0 << PIN7);
 19c:	81 b3       	in	r24, 0x11	; 17
 19e:	81 bb       	out	0x11, r24	; 17
	/*Pull-up on input PINS of PORTD*/
	PORTD |= (1<<4)|(1<<5)|(1<<6)|(1<<7);
 1a0:	82 b3       	in	r24, 0x12	; 18
 1a2:	80 6f       	ori	r24, 0xF0	; 240
 1a4:	82 bb       	out	0x12, r24	; 18
 1a6:	08 95       	ret

000001a8 <_ZN6Keypad16GetPressedButtonEv>:
 1a8:	82 e4       	ldi	r24, 0x42	; 66
 1aa:	8a 95       	dec	r24
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <_ZN6Keypad16GetPressedButtonEv+0x2>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <_ZN6Keypad16GetPressedButtonEv+0x8>
	uint8_t column_value;
	
	_delay_us(DELAY_BETWEEN_ROWS_POLLING);
	
	// FIRST ROW
	PORTD &= ~(1<<0); // 0 on first row;
 1b0:	90 98       	cbi	0x12, 0	; 18
 1b2:	92 e4       	ldi	r25, 0x42	; 66
 1b4:	9a 95       	dec	r25
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <_ZN6Keypad16GetPressedButtonEv+0xc>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <_ZN6Keypad16GetPressedButtonEv+0x12>
	_delay_us(DELAY_BETWEEN_ROWS_POLLING);

	column_value = PIND;
 1ba:	80 b3       	in	r24, 0x10	; 16

	if(!(column_value & 1<<4))
 1bc:	84 fd       	sbrc	r24, 4
 1be:	0c c0       	rjmp	.+24     	; 0x1d8 <_ZN6Keypad16GetPressedButtonEv+0x30>
	{
		while(1)
		{
			if(PIND!=column_value)
 1c0:	90 b3       	in	r25, 0x10	; 16
 1c2:	89 17       	cp	r24, r25
 1c4:	e9 f3       	breq	.-6      	; 0x1c0 <_ZN6Keypad16GetPressedButtonEv+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	87 ea       	ldi	r24, 0xA7	; 167
 1c8:	91 e6       	ldi	r25, 0x61	; 97
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <_ZN6Keypad16GetPressedButtonEv+0x22>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <_ZN6Keypad16GetPressedButtonEv+0x28>
 1d0:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_1;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	08 95       	ret
	}
	else if(!(column_value & 1<<5))
 1d8:	85 fd       	sbrc	r24, 5
 1da:	0c c0       	rjmp	.+24     	; 0x1f4 <_ZN6Keypad16GetPressedButtonEv+0x4c>
	{
		while(1)
		{
			if(PIND!=column_value)
 1dc:	90 b3       	in	r25, 0x10	; 16
 1de:	89 17       	cp	r24, r25
 1e0:	e9 f3       	breq	.-6      	; 0x1dc <_ZN6Keypad16GetPressedButtonEv+0x34>
 1e2:	87 ea       	ldi	r24, 0xA7	; 167
 1e4:	91 e6       	ldi	r25, 0x61	; 97
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <_ZN6Keypad16GetPressedButtonEv+0x3e>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <_ZN6Keypad16GetPressedButtonEv+0x44>
 1ec:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_2;
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	08 95       	ret
	}
	else if(!(column_value & 1<<6))
 1f4:	86 fd       	sbrc	r24, 6
 1f6:	0c c0       	rjmp	.+24     	; 0x210 <_ZN6Keypad16GetPressedButtonEv+0x68>
	{
		while(1)
		{
			if(PIND!=column_value)
 1f8:	90 b3       	in	r25, 0x10	; 16
 1fa:	89 17       	cp	r24, r25
 1fc:	e9 f3       	breq	.-6      	; 0x1f8 <_ZN6Keypad16GetPressedButtonEv+0x50>
 1fe:	87 ea       	ldi	r24, 0xA7	; 167
 200:	91 e6       	ldi	r25, 0x61	; 97
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <_ZN6Keypad16GetPressedButtonEv+0x5a>
 206:	00 c0       	rjmp	.+0      	; 0x208 <_ZN6Keypad16GetPressedButtonEv+0x60>
 208:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_3;
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	08 95       	ret
	}
	else if(!(column_value & 1<<7))
 210:	88 23       	and	r24, r24
 212:	64 f0       	brlt	.+24     	; 0x22c <_ZN6Keypad16GetPressedButtonEv+0x84>
	{
		while(1)
		{
			if(PIND!=column_value)
 214:	90 b3       	in	r25, 0x10	; 16
 216:	89 17       	cp	r24, r25
 218:	e9 f3       	breq	.-6      	; 0x214 <_ZN6Keypad16GetPressedButtonEv+0x6c>
 21a:	87 ea       	ldi	r24, 0xA7	; 167
 21c:	91 e6       	ldi	r25, 0x61	; 97
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <_ZN6Keypad16GetPressedButtonEv+0x76>
 222:	00 c0       	rjmp	.+0      	; 0x224 <_ZN6Keypad16GetPressedButtonEv+0x7c>
 224:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_4;
 226:	84 e0       	ldi	r24, 0x04	; 4
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	08 95       	ret
	}

	PORTD |= (1<<0); // 1 on first row;
 22c:	90 9a       	sbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22e:	92 e4       	ldi	r25, 0x42	; 66
 230:	9a 95       	dec	r25
 232:	f1 f7       	brne	.-4      	; 0x230 <_ZN6Keypad16GetPressedButtonEv+0x88>
 234:	00 c0       	rjmp	.+0      	; 0x236 <_ZN6Keypad16GetPressedButtonEv+0x8e>
	
	_delay_us(DELAY_BETWEEN_ROWS_POLLING);
	
	// SECOND ROW
	PORTD &= ~(1<<1); // 0 on second row;
 236:	91 98       	cbi	0x12, 1	; 18
 238:	82 e4       	ldi	r24, 0x42	; 66
 23a:	8a 95       	dec	r24
 23c:	f1 f7       	brne	.-4      	; 0x23a <_ZN6Keypad16GetPressedButtonEv+0x92>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <_ZN6Keypad16GetPressedButtonEv+0x98>
	_delay_us(DELAY_BETWEEN_ROWS_POLLING);

	column_value = PIND;
 240:	80 b3       	in	r24, 0x10	; 16

	if(!(column_value & 1<<4))
 242:	84 fd       	sbrc	r24, 4
 244:	0c c0       	rjmp	.+24     	; 0x25e <_ZN6Keypad16GetPressedButtonEv+0xb6>
	{
		while(1)
		{
			if(PIND!=column_value)
 246:	90 b3       	in	r25, 0x10	; 16
 248:	89 17       	cp	r24, r25
 24a:	e9 f3       	breq	.-6      	; 0x246 <_ZN6Keypad16GetPressedButtonEv+0x9e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	87 ea       	ldi	r24, 0xA7	; 167
 24e:	91 e6       	ldi	r25, 0x61	; 97
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <_ZN6Keypad16GetPressedButtonEv+0xa8>
 254:	00 c0       	rjmp	.+0      	; 0x256 <_ZN6Keypad16GetPressedButtonEv+0xae>
 256:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_5;
 258:	85 e0       	ldi	r24, 0x05	; 5
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	08 95       	ret
	}
	else if(!(column_value & 1<<5))
 25e:	85 fd       	sbrc	r24, 5
 260:	0c c0       	rjmp	.+24     	; 0x27a <_ZN6Keypad16GetPressedButtonEv+0xd2>
	{
		while(1)
		{
			if(PIND!=column_value)
 262:	90 b3       	in	r25, 0x10	; 16
 264:	89 17       	cp	r24, r25
 266:	e9 f3       	breq	.-6      	; 0x262 <_ZN6Keypad16GetPressedButtonEv+0xba>
 268:	87 ea       	ldi	r24, 0xA7	; 167
 26a:	91 e6       	ldi	r25, 0x61	; 97
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <_ZN6Keypad16GetPressedButtonEv+0xc4>
 270:	00 c0       	rjmp	.+0      	; 0x272 <_ZN6Keypad16GetPressedButtonEv+0xca>
 272:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_6;
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	08 95       	ret
	}
	else if(!(column_value & 1<<6))
 27a:	86 fd       	sbrc	r24, 6
 27c:	0c c0       	rjmp	.+24     	; 0x296 <_ZN6Keypad16GetPressedButtonEv+0xee>
	{
		while(1)
		{
			if(PIND!=column_value)
 27e:	90 b3       	in	r25, 0x10	; 16
 280:	89 17       	cp	r24, r25
 282:	e9 f3       	breq	.-6      	; 0x27e <_ZN6Keypad16GetPressedButtonEv+0xd6>
 284:	87 ea       	ldi	r24, 0xA7	; 167
 286:	91 e6       	ldi	r25, 0x61	; 97
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <_ZN6Keypad16GetPressedButtonEv+0xe0>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <_ZN6Keypad16GetPressedButtonEv+0xe6>
 28e:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_7;
 290:	87 e0       	ldi	r24, 0x07	; 7
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	08 95       	ret
	}
	else if(!(column_value & 1<<7))
 296:	88 23       	and	r24, r24
 298:	64 f0       	brlt	.+24     	; 0x2b2 <_ZN6Keypad16GetPressedButtonEv+0x10a>
	{
		while(1)
		{
			if(PIND!=column_value)
 29a:	90 b3       	in	r25, 0x10	; 16
 29c:	89 17       	cp	r24, r25
 29e:	e9 f3       	breq	.-6      	; 0x29a <_ZN6Keypad16GetPressedButtonEv+0xf2>
 2a0:	87 ea       	ldi	r24, 0xA7	; 167
 2a2:	91 e6       	ldi	r25, 0x61	; 97
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <_ZN6Keypad16GetPressedButtonEv+0xfc>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <_ZN6Keypad16GetPressedButtonEv+0x102>
 2aa:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_8;
 2ac:	88 e0       	ldi	r24, 0x08	; 8
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	08 95       	ret
	}

	PORTD |= (1<<1); // 1 on second row;
 2b2:	91 9a       	sbi	0x12, 1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b4:	92 e4       	ldi	r25, 0x42	; 66
 2b6:	9a 95       	dec	r25
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <_ZN6Keypad16GetPressedButtonEv+0x10e>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <_ZN6Keypad16GetPressedButtonEv+0x114>

	_delay_us(DELAY_BETWEEN_ROWS_POLLING);

	// THIRD ROW
	PORTD &= ~(1<<2); // 0 on third row;
 2bc:	92 98       	cbi	0x12, 2	; 18
 2be:	82 e4       	ldi	r24, 0x42	; 66
 2c0:	8a 95       	dec	r24
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <_ZN6Keypad16GetPressedButtonEv+0x118>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <_ZN6Keypad16GetPressedButtonEv+0x11e>
	_delay_us(DELAY_BETWEEN_ROWS_POLLING);

	column_value = PIND;
 2c6:	80 b3       	in	r24, 0x10	; 16

	if(!(column_value & 1<<4))
 2c8:	84 fd       	sbrc	r24, 4
 2ca:	0c c0       	rjmp	.+24     	; 0x2e4 <_ZN6Keypad16GetPressedButtonEv+0x13c>
	{
		while(1)
		{
			if(PIND!=column_value)
 2cc:	90 b3       	in	r25, 0x10	; 16
 2ce:	89 17       	cp	r24, r25
 2d0:	e9 f3       	breq	.-6      	; 0x2cc <_ZN6Keypad16GetPressedButtonEv+0x124>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d2:	87 ea       	ldi	r24, 0xA7	; 167
 2d4:	91 e6       	ldi	r25, 0x61	; 97
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <_ZN6Keypad16GetPressedButtonEv+0x12e>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <_ZN6Keypad16GetPressedButtonEv+0x134>
 2dc:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_9;
 2de:	89 e0       	ldi	r24, 0x09	; 9
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	08 95       	ret
	}
	else if(!(column_value & 1<<5))
 2e4:	85 fd       	sbrc	r24, 5
 2e6:	0c c0       	rjmp	.+24     	; 0x300 <_ZN6Keypad16GetPressedButtonEv+0x158>
	{
		while(1)
		{
			if(PIND!=column_value)
 2e8:	90 b3       	in	r25, 0x10	; 16
 2ea:	89 17       	cp	r24, r25
 2ec:	e9 f3       	breq	.-6      	; 0x2e8 <_ZN6Keypad16GetPressedButtonEv+0x140>
 2ee:	87 ea       	ldi	r24, 0xA7	; 167
 2f0:	91 e6       	ldi	r25, 0x61	; 97
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <_ZN6Keypad16GetPressedButtonEv+0x14a>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <_ZN6Keypad16GetPressedButtonEv+0x150>
 2f8:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_0;
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	08 95       	ret
	}
	else if(!(column_value & 1<<6))
 300:	86 fd       	sbrc	r24, 6
 302:	0c c0       	rjmp	.+24     	; 0x31c <_ZN6Keypad16GetPressedButtonEv+0x174>
	{
		while(1)
		{
			if(PIND!=column_value)
 304:	90 b3       	in	r25, 0x10	; 16
 306:	89 17       	cp	r24, r25
 308:	e9 f3       	breq	.-6      	; 0x304 <_ZN6Keypad16GetPressedButtonEv+0x15c>
 30a:	87 ea       	ldi	r24, 0xA7	; 167
 30c:	91 e6       	ldi	r25, 0x61	; 97
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <_ZN6Keypad16GetPressedButtonEv+0x166>
 312:	00 c0       	rjmp	.+0      	; 0x314 <_ZN6Keypad16GetPressedButtonEv+0x16c>
 314:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_OK;
 316:	8b e0       	ldi	r24, 0x0B	; 11
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	08 95       	ret
	}
	else if(!(column_value & 1<<7))
 31c:	88 23       	and	r24, r24
 31e:	64 f0       	brlt	.+24     	; 0x338 <_ZN6Keypad16GetPressedButtonEv+0x190>
	{
		while(1)
		{
			if(PIND!=column_value)
 320:	90 b3       	in	r25, 0x10	; 16
 322:	89 17       	cp	r24, r25
 324:	e9 f3       	breq	.-6      	; 0x320 <_ZN6Keypad16GetPressedButtonEv+0x178>
 326:	87 ea       	ldi	r24, 0xA7	; 167
 328:	91 e6       	ldi	r25, 0x61	; 97
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <_ZN6Keypad16GetPressedButtonEv+0x182>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <_ZN6Keypad16GetPressedButtonEv+0x188>
 330:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_CANCEL;
 332:	8c e0       	ldi	r24, 0x0C	; 12
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	08 95       	ret
	}

	PORTD |= (1<<2); // 0 on third row;
 338:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33a:	92 e4       	ldi	r25, 0x42	; 66
 33c:	9a 95       	dec	r25
 33e:	f1 f7       	brne	.-4      	; 0x33c <_ZN6Keypad16GetPressedButtonEv+0x194>
 340:	00 c0       	rjmp	.+0      	; 0x342 <_ZN6Keypad16GetPressedButtonEv+0x19a>

	_delay_us(DELAY_BETWEEN_ROWS_POLLING);

	return Button::NO_BUTTON_PRESSED;      //reserved value meaning that input did not change
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	9f ef       	ldi	r25, 0xFF	; 255
 346:	08 95       	ret

00000348 <main>:
#include "functions.h"
#include "keypad.h"
#include "display.h"

int main(void)
{
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	00 d0       	rcall	.+0      	; 0x34e <main+0x6>
 34e:	00 d0       	rcall	.+0      	; 0x350 <main+0x8>
 350:	00 d0       	rcall	.+0      	; 0x352 <main+0xa>
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
	Display display;
	Keypad keypad;
	
	uint8_t digitPointer = 1;
	Button pressedButton = Button::NO_BUTTON_PRESSED;
	uint8_t digitsOnDisplay[4] = {'-', '-', '-', '-'};          //table of values currently shown on 7-segment display
 356:	8d e2       	ldi	r24, 0x2D	; 45
 358:	8b 83       	std	Y+3, r24	; 0x03
 35a:	8c 83       	std	Y+4, r24	; 0x04
 35c:	8d 83       	std	Y+5, r24	; 0x05
 35e:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t code[4];											//table storing code set by admin
	uint8_t enteredCode[4];										//table storing code entered by user

	init_ports();
 360:	0e 94 c3 00 	call	0x186	; 0x186 <_Z10init_portsv>
int main(void)
{
	Display display;
	Keypad keypad;
	
	uint8_t digitPointer = 1;
 364:	11 e0       	ldi	r17, 0x01	; 1

	init_ports();

	while (1)
	{
		pressedButton = keypad.GetPressedButton();							//poll for value on keypad
 366:	ce 01       	movw	r24, r28
 368:	02 96       	adiw	r24, 0x02	; 2
 36a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_ZN6Keypad16GetPressedButtonEv>

		if(pressedButton != Button::NO_BUTTON_PRESSED)				//if input changed
 36e:	8f 3f       	cpi	r24, 0xFF	; 255
 370:	2f ef       	ldi	r18, 0xFF	; 255
 372:	92 07       	cpc	r25, r18
 374:	99 f1       	breq	.+102    	; 0x3dc <main+0x94>
		{
			if(pressedButton == Button::BUTTON_CANCEL)								//if cancel button was pressed
 376:	8c 30       	cpi	r24, 0x0C	; 12
 378:	91 05       	cpc	r25, r1
 37a:	51 f4       	brne	.+20     	; 0x390 <main+0x48>
			{
				display.SetValueOnWholeDisplay('-', digitsOnDisplay);
 37c:	ae 01       	movw	r20, r28
 37e:	4d 5f       	subi	r20, 0xFD	; 253
 380:	5f 4f       	sbci	r21, 0xFF	; 255
 382:	6d e2       	ldi	r22, 0x2D	; 45
 384:	ce 01       	movw	r24, r28
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Display22SetValueOnWholeDisplayEhPh>
				digitPointer = 1;
 38c:	11 e0       	ldi	r17, 0x01	; 1
				continue;
 38e:	eb cf       	rjmp	.-42     	; 0x366 <main+0x1e>
			}
			
			if(digitPointer == 5 && pressedButton == Button::BUTTON_OK)						//if 4 digits were entered and OK button was pressed
 390:	15 30       	cpi	r17, 0x05	; 5
 392:	e1 f4       	brne	.+56     	; 0x3cc <main+0x84>
 394:	8b 30       	cpi	r24, 0x0B	; 11
 396:	91 05       	cpc	r25, r1
 398:	c9 f4       	brne	.+50     	; 0x3cc <main+0x84>
			{
				code[0] = digitsOnDisplay[0];
 39a:	cb 80       	ldd	r12, Y+3	; 0x03
				code[1] = digitsOnDisplay[1];
 39c:	bc 80       	ldd	r11, Y+4	; 0x04
				code[2] = digitsOnDisplay[2];
 39e:	9d 80       	ldd	r9, Y+5	; 0x05
				code[3] = digitsOnDisplay[3];
 3a0:	ae 80       	ldd	r10, Y+6	; 0x06
			display.SetValueOnWholeDisplay('-', digitsOnDisplay);
			digitPointer = 1;
		}
	}
	
	display.SetValueOnWholeDisplay(13, digitsOnDisplay);										//set display to '-.' in locked state
 3a2:	ae 01       	movw	r20, r28
 3a4:	4d 5f       	subi	r20, 0xFD	; 253
 3a6:	5f 4f       	sbci	r21, 0xFF	; 255
 3a8:	6d e0       	ldi	r22, 0x0D	; 13
 3aa:	ce 01       	movw	r24, r28
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Display22SetValueOnWholeDisplayEhPh>

	digitPointer = 1;
 3b2:	11 e0       	ldi	r17, 0x01	; 1
					break;
				}
				
				else
				{
					digitsOnDisplay[0] = 8;   //B
 3b4:	68 94       	set
 3b6:	dd 24       	eor	r13, r13
 3b8:	d3 f8       	bld	r13, 3
					digitsOnDisplay[1] = 17;  //A
 3ba:	0f 2e       	mov	r0, r31
 3bc:	f1 e1       	ldi	r31, 0x11	; 17
 3be:	ef 2e       	mov	r14, r31
 3c0:	f0 2d       	mov	r31, r0
					digitsOnDisplay[2] = 0;   //D
					digitsOnDisplay[3] = 18;  //nothing
 3c2:	0f 2e       	mov	r0, r31
 3c4:	f2 e1       	ldi	r31, 0x12	; 18
 3c6:	ff 2e       	mov	r15, r31
 3c8:	f0 2d       	mov	r31, r0
 3ca:	2d c0       	rjmp	.+90     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
				code[2] = digitsOnDisplay[2];
				code[3] = digitsOnDisplay[3];
				break;
			}
			
			digitsOnDisplay[digitPointer-1] = static_cast<uint8_t>(pressedButton);
 3cc:	e2 e0       	ldi	r30, 0x02	; 2
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	ec 0f       	add	r30, r28
 3d2:	fd 1f       	adc	r31, r29
 3d4:	e1 0f       	add	r30, r17
 3d6:	f1 1d       	adc	r31, r1
 3d8:	80 83       	st	Z, r24
			digitPointer++;
 3da:	1f 5f       	subi	r17, 0xFF	; 255
		}

		if(digitPointer < 6)
 3dc:	16 30       	cpi	r17, 0x06	; 6
 3de:	c8 f4       	brcc	.+50     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		{
			display.SetDigit(digitsOnDisplay[0], 1);
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	6b 81       	ldd	r22, Y+3	; 0x03
 3e4:	ce 01       	movw	r24, r28
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	0e 94 65 00 	call	0xca	; 0xca <_ZN7Display8SetDigitEhh>
			display.SetDigit(digitsOnDisplay[1], 2);
 3ec:	42 e0       	ldi	r20, 0x02	; 2
 3ee:	6c 81       	ldd	r22, Y+4	; 0x04
 3f0:	ce 01       	movw	r24, r28
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	0e 94 65 00 	call	0xca	; 0xca <_ZN7Display8SetDigitEhh>
			display.SetDigit(digitsOnDisplay[2], 3);
 3f8:	43 e0       	ldi	r20, 0x03	; 3
 3fa:	6d 81       	ldd	r22, Y+5	; 0x05
 3fc:	ce 01       	movw	r24, r28
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	0e 94 65 00 	call	0xca	; 0xca <_ZN7Display8SetDigitEhh>
			display.SetDigit(digitsOnDisplay[3], 4);
 404:	44 e0       	ldi	r20, 0x04	; 4
 406:	6e 81       	ldd	r22, Y+6	; 0x06
 408:	ce 01       	movw	r24, r28
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	0e 94 65 00 	call	0xca	; 0xca <_ZN7Display8SetDigitEhh>
 410:	aa cf       	rjmp	.-172    	; 0x366 <main+0x1e>
		}
		else
		{
			display.SetValueOnWholeDisplay('-', digitsOnDisplay);
 412:	ae 01       	movw	r20, r28
 414:	4d 5f       	subi	r20, 0xFD	; 253
 416:	5f 4f       	sbci	r21, 0xFF	; 255
 418:	6d e2       	ldi	r22, 0x2D	; 45
 41a:	ce 01       	movw	r24, r28
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Display22SetValueOnWholeDisplayEhPh>
			digitPointer = 1;
 422:	11 e0       	ldi	r17, 0x01	; 1
 424:	a0 cf       	rjmp	.-192    	; 0x366 <main+0x1e>
	long int del = 0;

	//COMPARING ENTERED CODE WITH CODE SET BEFORE
	while (1)
	{
		pressedButton = keypad.GetPressedButton();							//poll for value on keypad
 426:	ce 01       	movw	r24, r28
 428:	02 96       	adiw	r24, 0x02	; 2
 42a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_ZN6Keypad16GetPressedButtonEv>

		if(pressedButton != Button::NO_BUTTON_PRESSED)									//if input changed
 42e:	8f 3f       	cpi	r24, 0xFF	; 255
 430:	2f ef       	ldi	r18, 0xFF	; 255
 432:	92 07       	cpc	r25, r18
 434:	09 f4       	brne	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 436:	63 c0       	rjmp	.+198    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
		{
			if(pressedButton == Button::BUTTON_CANCEL)								//if cancel button was pressed
 438:	8c 30       	cpi	r24, 0x0C	; 12
 43a:	91 05       	cpc	r25, r1
 43c:	51 f4       	brne	.+20     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
			{
				display.SetValueOnWholeDisplay(13, digitsOnDisplay);
 43e:	ae 01       	movw	r20, r28
 440:	4d 5f       	subi	r20, 0xFD	; 253
 442:	5f 4f       	sbci	r21, 0xFF	; 255
 444:	6d e0       	ldi	r22, 0x0D	; 13
 446:	ce 01       	movw	r24, r28
 448:	01 96       	adiw	r24, 0x01	; 1
 44a:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Display22SetValueOnWholeDisplayEhPh>
				digitPointer=1;
 44e:	11 e0       	ldi	r17, 0x01	; 1
				continue;
 450:	ea cf       	rjmp	.-44     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
			}
			
			if(digitPointer==5 && pressedButton == Button::BUTTON_OK)						//if 4 digits were entered and OK button was pressed
 452:	15 30       	cpi	r17, 0x05	; 5
 454:	09 f0       	breq	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 456:	4b c0       	rjmp	.+150    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 458:	8b 30       	cpi	r24, 0x0B	; 11
 45a:	91 05       	cpc	r25, r1
 45c:	09 f0       	breq	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45e:	47 c0       	rjmp	.+142    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
				enteredCode[0] = digitsOnDisplay[0];
				enteredCode[1] = digitsOnDisplay[1];
				enteredCode[2] = digitsOnDisplay[2];
				enteredCode[3] = digitsOnDisplay[3];
				
				if(enteredCode[0]==code[0] && enteredCode[1]==code[1] && enteredCode[2]==code[2] && enteredCode[3]==code[3]) //check if code is correct
 460:	8b 81       	ldd	r24, Y+3	; 0x03
 462:	c8 12       	cpse	r12, r24
 464:	11 c0       	rjmp	.+34     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 466:	8c 81       	ldd	r24, Y+4	; 0x04
 468:	b8 12       	cpse	r11, r24
 46a:	0e c0       	rjmp	.+28     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 46c:	8d 81       	ldd	r24, Y+5	; 0x05
 46e:	98 12       	cpse	r9, r24
 470:	0b c0       	rjmp	.+22     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 472:	8e 81       	ldd	r24, Y+6	; 0x06
 474:	a8 12       	cpse	r10, r24
 476:	08 c0       	rjmp	.+16     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
				{
					digitsOnDisplay[0] = 0; //O
 478:	1b 82       	std	Y+3, r1	; 0x03
					digitsOnDisplay[1] = 14;//P
 47a:	8e e0       	ldi	r24, 0x0E	; 14
 47c:	8c 83       	std	Y+4, r24	; 0x04
					digitsOnDisplay[2] = 15;//E
 47e:	8f e0       	ldi	r24, 0x0F	; 15
 480:	8d 83       	std	Y+5, r24	; 0x05
					digitsOnDisplay[3] = 16;//N
 482:	80 e1       	ldi	r24, 0x10	; 16
 484:	8e 83       	std	Y+6, r24	; 0x06
					break;
 486:	60 c0       	rjmp	.+192    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
				}
				
				else
				{
					digitsOnDisplay[0] = 8;   //B
 488:	db 82       	std	Y+3, r13	; 0x03
					digitsOnDisplay[1] = 17;  //A
 48a:	ec 82       	std	Y+4, r14	; 0x04
					digitsOnDisplay[2] = 0;   //D
 48c:	1d 82       	std	Y+5, r1	; 0x05
					digitsOnDisplay[3] = 18;  //nothing
 48e:	fe 82       	std	Y+6, r15	; 0x06
 490:	00 e0       	ldi	r16, 0x00	; 0
 492:	10 e0       	ldi	r17, 0x00	; 0
					
					while(1)
					{
						display.SetDigit(digitsOnDisplay[0], 1);
 494:	41 e0       	ldi	r20, 0x01	; 1
 496:	6b 81       	ldd	r22, Y+3	; 0x03
 498:	ce 01       	movw	r24, r28
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	0e 94 65 00 	call	0xca	; 0xca <_ZN7Display8SetDigitEhh>
						display.SetDigit(digitsOnDisplay[1], 2);
 4a0:	42 e0       	ldi	r20, 0x02	; 2
 4a2:	6c 81       	ldd	r22, Y+4	; 0x04
 4a4:	ce 01       	movw	r24, r28
 4a6:	01 96       	adiw	r24, 0x01	; 1
 4a8:	0e 94 65 00 	call	0xca	; 0xca <_ZN7Display8SetDigitEhh>
						display.SetDigit(digitsOnDisplay[2], 3);
 4ac:	43 e0       	ldi	r20, 0x03	; 3
 4ae:	6d 81       	ldd	r22, Y+5	; 0x05
 4b0:	ce 01       	movw	r24, r28
 4b2:	01 96       	adiw	r24, 0x01	; 1
 4b4:	0e 94 65 00 	call	0xca	; 0xca <_ZN7Display8SetDigitEhh>
						display.SetDigit(digitsOnDisplay[3], 4);
 4b8:	44 e0       	ldi	r20, 0x04	; 4
 4ba:	6e 81       	ldd	r22, Y+6	; 0x06
 4bc:	ce 01       	movw	r24, r28
 4be:	01 96       	adiw	r24, 0x01	; 1
 4c0:	0e 94 65 00 	call	0xca	; 0xca <_ZN7Display8SetDigitEhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c4:	81 ee       	ldi	r24, 0xE1	; 225
 4c6:	94 e0       	ldi	r25, 0x04	; 4
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4ce:	00 00       	nop
 4d0:	0f 5f       	subi	r16, 0xFF	; 255
 4d2:	1f 4f       	sbci	r17, 0xFF	; 255
						
						_delay_ms(5);
						del++;

						if(del >= 200) //if about 1 second passed
 4d4:	08 3c       	cpi	r16, 0xC8	; 200
 4d6:	11 05       	cpc	r17, r1
 4d8:	e9 f6       	brne	.-70     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
						{
							del = 0;	 //reset delay cycles counter
							display.SetValueOnWholeDisplay(13, digitsOnDisplay);
 4da:	ae 01       	movw	r20, r28
 4dc:	4d 5f       	subi	r20, 0xFD	; 253
 4de:	5f 4f       	sbci	r21, 0xFF	; 255
 4e0:	6d e0       	ldi	r22, 0x0D	; 13
 4e2:	ce 01       	movw	r24, r28
 4e4:	01 96       	adiw	r24, 0x01	; 1
 4e6:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Display22SetValueOnWholeDisplayEhPh>
							digitPointer = 1;	 //reset iterator
 4ea:	11 e0       	ldi	r17, 0x01	; 1
							break;
						}
					}
					continue;
 4ec:	9c cf       	rjmp	.-200    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
				}
			}
			digitsOnDisplay[digitPointer-1] = static_cast<uint8_t>(pressedButton);
 4ee:	e2 e0       	ldi	r30, 0x02	; 2
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	ec 0f       	add	r30, r28
 4f4:	fd 1f       	adc	r31, r29
 4f6:	e1 0f       	add	r30, r17
 4f8:	f1 1d       	adc	r31, r1
 4fa:	80 83       	st	Z, r24
			digitPointer++;
 4fc:	1f 5f       	subi	r17, 0xFF	; 255
		}

		if(digitPointer<6)
 4fe:	16 30       	cpi	r17, 0x06	; 6
 500:	c8 f4       	brcc	.+50     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
		{
			display.SetDigit(digitsOnDisplay[0],1);
 502:	41 e0       	ldi	r20, 0x01	; 1
 504:	6b 81       	ldd	r22, Y+3	; 0x03
 506:	ce 01       	movw	r24, r28
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	0e 94 65 00 	call	0xca	; 0xca <_ZN7Display8SetDigitEhh>
			display.SetDigit(digitsOnDisplay[1],2);
 50e:	42 e0       	ldi	r20, 0x02	; 2
 510:	6c 81       	ldd	r22, Y+4	; 0x04
 512:	ce 01       	movw	r24, r28
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	0e 94 65 00 	call	0xca	; 0xca <_ZN7Display8SetDigitEhh>
			display.SetDigit(digitsOnDisplay[2],3);
 51a:	43 e0       	ldi	r20, 0x03	; 3
 51c:	6d 81       	ldd	r22, Y+5	; 0x05
 51e:	ce 01       	movw	r24, r28
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	0e 94 65 00 	call	0xca	; 0xca <_ZN7Display8SetDigitEhh>
			display.SetDigit(digitsOnDisplay[3],4);
 526:	44 e0       	ldi	r20, 0x04	; 4
 528:	6e 81       	ldd	r22, Y+6	; 0x06
 52a:	ce 01       	movw	r24, r28
 52c:	01 96       	adiw	r24, 0x01	; 1
 52e:	0e 94 65 00 	call	0xca	; 0xca <_ZN7Display8SetDigitEhh>
 532:	79 cf       	rjmp	.-270    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		}

		else
		{
			display.SetValueOnWholeDisplay('-', digitsOnDisplay);
 534:	ae 01       	movw	r20, r28
 536:	4d 5f       	subi	r20, 0xFD	; 253
 538:	5f 4f       	sbci	r21, 0xFF	; 255
 53a:	6d e2       	ldi	r22, 0x2D	; 45
 53c:	ce 01       	movw	r24, r28
 53e:	01 96       	adiw	r24, 0x01	; 1
 540:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Display22SetValueOnWholeDisplayEhPh>
			digitPointer = 1;
 544:	11 e0       	ldi	r17, 0x01	; 1
 546:	6f cf       	rjmp	.-290    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		}
	}
	
	while(1)
	{
		display.SetDigit(digitsOnDisplay[0], 1);
 548:	41 e0       	ldi	r20, 0x01	; 1
 54a:	6b 81       	ldd	r22, Y+3	; 0x03
 54c:	ce 01       	movw	r24, r28
 54e:	01 96       	adiw	r24, 0x01	; 1
 550:	0e 94 65 00 	call	0xca	; 0xca <_ZN7Display8SetDigitEhh>
		display.SetDigit(digitsOnDisplay[1], 2);
 554:	42 e0       	ldi	r20, 0x02	; 2
 556:	6c 81       	ldd	r22, Y+4	; 0x04
 558:	ce 01       	movw	r24, r28
 55a:	01 96       	adiw	r24, 0x01	; 1
 55c:	0e 94 65 00 	call	0xca	; 0xca <_ZN7Display8SetDigitEhh>
		display.SetDigit(digitsOnDisplay[2], 3);
 560:	43 e0       	ldi	r20, 0x03	; 3
 562:	6d 81       	ldd	r22, Y+5	; 0x05
 564:	ce 01       	movw	r24, r28
 566:	01 96       	adiw	r24, 0x01	; 1
 568:	0e 94 65 00 	call	0xca	; 0xca <_ZN7Display8SetDigitEhh>
		display.SetDigit(digitsOnDisplay[3], 4);
 56c:	44 e0       	ldi	r20, 0x04	; 4
 56e:	6e 81       	ldd	r22, Y+6	; 0x06
 570:	ce 01       	movw	r24, r28
 572:	01 96       	adiw	r24, 0x01	; 1
 574:	0e 94 65 00 	call	0xca	; 0xca <_ZN7Display8SetDigitEhh>
 578:	e7 cf       	rjmp	.-50     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>

0000057a <__tablejump2__>:
 57a:	ee 0f       	add	r30, r30
 57c:	ff 1f       	adc	r31, r31
 57e:	05 90       	lpm	r0, Z+
 580:	f4 91       	lpm	r31, Z
 582:	e0 2d       	mov	r30, r0
 584:	09 94       	ijmp

00000586 <_exit>:
 586:	f8 94       	cli

00000588 <__stop_program>:
 588:	ff cf       	rjmp	.-2      	; 0x588 <__stop_program>
