
Keypad_Lock_ATMega32A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000534  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011a8  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000092d  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009c2  00000000  00000000  00002141  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00002b04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000059d  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ae1  00000000  00000000  0000314d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00003c2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	9b 00       	.word	0x009b	; ????
  56:	9e 00       	.word	0x009e	; ????
  58:	a1 00       	.word	0x00a1	; ????
  5a:	a4 00       	.word	0x00a4	; ????
  5c:	a7 00       	.word	0x00a7	; ????
  5e:	aa 00       	.word	0x00aa	; ????
  60:	ad 00       	.word	0x00ad	; ????
  62:	b0 00       	.word	0x00b0	; ????
  64:	b3 00       	.word	0x00b3	; ????
  66:	b6 00       	.word	0x00b6	; ????
  68:	d0 00       	.word	0x00d0	; ????
  6a:	d0 00       	.word	0x00d0	; ????
  6c:	d0 00       	.word	0x00d0	; ????
  6e:	bf 00       	.word	0x00bf	; ????
  70:	c2 00       	.word	0x00c2	; ????
  72:	c5 00       	.word	0x00c5	; ????
  74:	c8 00       	.word	0x00c8	; ????
  76:	cb 00       	.word	0x00cb	; ????
  78:	ce 00       	.word	0x00ce	; ????
  7a:	d0 00       	.word	0x00d0	; ????
  7c:	d0 00       	.word	0x00d0	; ????
  7e:	d0 00       	.word	0x00d0	; ????
  80:	d0 00       	.word	0x00d0	; ????
  82:	d0 00       	.word	0x00d0	; ????
  84:	d0 00       	.word	0x00d0	; ????
  86:	d0 00       	.word	0x00d0	; ????
  88:	d0 00       	.word	0x00d0	; ????
  8a:	d0 00       	.word	0x00d0	; ????
  8c:	d0 00       	.word	0x00d0	; ????
  8e:	d0 00       	.word	0x00d0	; ????
  90:	d0 00       	.word	0x00d0	; ????
  92:	d0 00       	.word	0x00d0	; ????
  94:	d0 00       	.word	0x00d0	; ????
  96:	d0 00       	.word	0x00d0	; ????
  98:	d0 00       	.word	0x00d0	; ????
  9a:	d0 00       	.word	0x00d0	; ????
  9c:	d0 00       	.word	0x00d0	; ????
  9e:	d0 00       	.word	0x00d0	; ????
  a0:	d0 00       	.word	0x00d0	; ????
  a2:	d0 00       	.word	0x00d0	; ????
  a4:	d0 00       	.word	0x00d0	; ????
  a6:	d0 00       	.word	0x00d0	; ????
  a8:	d0 00       	.word	0x00d0	; ????
  aa:	d0 00       	.word	0x00d0	; ????
  ac:	d0 00       	.word	0x00d0	; ????
  ae:	b9 00       	.word	0x00b9	; ????
  b0:	bc 00       	.word	0x00bc	; ????

000000b2 <__ctors_end>:
  b2:	11 24       	eor	r1, r1
  b4:	1f be       	out	0x3f, r1	; 63
  b6:	cf e5       	ldi	r28, 0x5F	; 95
  b8:	d8 e0       	ldi	r29, 0x08	; 8
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	cd bf       	out	0x3d, r28	; 61
  be:	0e 94 a6 01 	call	0x34c	; 0x34c <main>
  c2:	0c 94 98 02 	jmp	0x530	; 0x530 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <_Z10init_portsv>:

void init_ports(void)
{
	/*----------------------PORTA----------------------*/
	/*All 8 pins of PORTA set as output drive segments of 7 segment display*/
	DDRA = 255;
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0;
  ce:	1b ba       	out	0x1b, r1	; 27

	/*----------------------PORTB----------------------*/
	/*Pins PIN0, PIN1, PIN2, PIN3 of PORTB set as output drive digits of 7 segment display,
	rest of pins of PORTB is unused*/
	DDRB = 0;
  d0:	17 ba       	out	0x17, r1	; 23
	DDRB |= (1 << PIN0) | (1 << PIN1) | (1 << PIN2) | (1 << PIN3);
  d2:	87 b3       	in	r24, 0x17	; 23
  d4:	8f 60       	ori	r24, 0x0F	; 15
  d6:	87 bb       	out	0x17, r24	; 23
	PORTB = 0;
  d8:	18 ba       	out	0x18, r1	; 24

	/*----------------------PORTD----------------------*/
	/*Pins PIN0, PIN1, PIN2, PIN3 of PORTD set as output drive rows of keyboard*/
	DDRD |= (1 << PIN0) | (1 << PIN1) | (1 << PIN2) | (1 << PIN3);
  da:	81 b3       	in	r24, 0x11	; 17
  dc:	8f 60       	ori	r24, 0x0F	; 15
  de:	81 bb       	out	0x11, r24	; 17
	/*Pins PIN4, PIN5, PIN6, PIN7 of PORTD set as input control columns of keyboard*/
	DDRD |= (0 << PIN4) | (0 << PIN5) | (0 << PIN6) | (0 << PIN7);
  e0:	81 b3       	in	r24, 0x11	; 17
  e2:	81 bb       	out	0x11, r24	; 17
	/*Pull-up on input PINS of PORTD*/
	PORTD |= (1<<4)|(1<<5)|(1<<6)|(1<<7);
  e4:	82 b3       	in	r24, 0x12	; 18
  e6:	80 6f       	ori	r24, 0xF0	; 240
  e8:	82 bb       	out	0x12, r24	; 18
  ea:	08 95       	ret

000000ec <_Z22setValueOnWholeDisplayhPh>:
	_delay_us(600);
	clear_display();
}

void setValueOnWholeDisplay(uint8_t value, uint8_t displayed_values[])
{
  ec:	fb 01       	movw	r30, r22
	for(int i=0; i<4; i++)
	{
		displayed_values[i] = value;
  ee:	80 83       	st	Z, r24
  f0:	81 83       	std	Z+1, r24	; 0x01
  f2:	82 83       	std	Z+2, r24	; 0x02
  f4:	83 83       	std	Z+3, r24	; 0x03
  f6:	08 95       	ret

000000f8 <_Z13clear_displayv>:
	}
}

void clear_display(void)
{
	PORTA = 255;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	8b bb       	out	0x1b, r24	; 27
	PORTB = 255;
  fc:	88 bb       	out	0x18, r24	; 24
  fe:	08 95       	ret

00000100 <_Z8setDigithh>:
	PORTD |= (1<<4)|(1<<5)|(1<<6)|(1<<7);
}

void setDigit(uint8_t number, uint8_t position)
{
	switch(position)
 100:	62 30       	cpi	r22, 0x02	; 2
 102:	59 f0       	breq	.+22     	; 0x11a <_Z8setDigithh+0x1a>
 104:	18 f4       	brcc	.+6      	; 0x10c <_Z8setDigithh+0xc>
 106:	61 30       	cpi	r22, 0x01	; 1
 108:	31 f0       	breq	.+12     	; 0x116 <_Z8setDigithh+0x16>
 10a:	0c c0       	rjmp	.+24     	; 0x124 <_Z8setDigithh+0x24>
 10c:	63 30       	cpi	r22, 0x03	; 3
 10e:	39 f0       	breq	.+14     	; 0x11e <_Z8setDigithh+0x1e>
 110:	64 30       	cpi	r22, 0x04	; 4
 112:	39 f0       	breq	.+14     	; 0x122 <_Z8setDigithh+0x22>
 114:	07 c0       	rjmp	.+14     	; 0x124 <_Z8setDigithh+0x24>
	{
		case 1:
		PORTB &= ~(1<<0);
 116:	c0 98       	cbi	0x18, 0	; 24
		break;
 118:	05 c0       	rjmp	.+10     	; 0x124 <_Z8setDigithh+0x24>

		case 2:
		PORTB &= ~(1<<1);
 11a:	c1 98       	cbi	0x18, 1	; 24
		break;
 11c:	03 c0       	rjmp	.+6      	; 0x124 <_Z8setDigithh+0x24>

		case 3:
		PORTB &= ~(1<<2);
 11e:	c2 98       	cbi	0x18, 2	; 24
		break;
 120:	01 c0       	rjmp	.+2      	; 0x124 <_Z8setDigithh+0x24>

		case 4:
		PORTB &= ~(1<<3);
 122:	c3 98       	cbi	0x18, 3	; 24
		break;
	}

	switch(number)
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	8f 32       	cpi	r24, 0x2F	; 47
 128:	91 05       	cpc	r25, r1
 12a:	d0 f5       	brcc	.+116    	; 0x1a0 <_Z8setDigithh+0xa0>
 12c:	fc 01       	movw	r30, r24
 12e:	e6 5d       	subi	r30, 0xD6	; 214
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	0c 94 92 02 	jmp	0x524	; 0x524 <__tablejump2__>
	{
		/*Hex codes for common anode 7-segment display setup*/
		case 0:
		PORTA = 0xC0;
 136:	80 ec       	ldi	r24, 0xC0	; 192
 138:	8b bb       	out	0x1b, r24	; 27
		break;
 13a:	32 c0       	rjmp	.+100    	; 0x1a0 <_Z8setDigithh+0xa0>

		case 1:
		PORTA = 0xF9;
 13c:	89 ef       	ldi	r24, 0xF9	; 249
 13e:	8b bb       	out	0x1b, r24	; 27
		break;
 140:	2f c0       	rjmp	.+94     	; 0x1a0 <_Z8setDigithh+0xa0>

		case 2:
		PORTA = 0xA4;
 142:	84 ea       	ldi	r24, 0xA4	; 164
 144:	8b bb       	out	0x1b, r24	; 27
		break;
 146:	2c c0       	rjmp	.+88     	; 0x1a0 <_Z8setDigithh+0xa0>

		case 3:
		PORTA = 0xB0;
 148:	80 eb       	ldi	r24, 0xB0	; 176
 14a:	8b bb       	out	0x1b, r24	; 27
		break;
 14c:	29 c0       	rjmp	.+82     	; 0x1a0 <_Z8setDigithh+0xa0>

		case 4:
		PORTA = 0x99;
 14e:	89 e9       	ldi	r24, 0x99	; 153
 150:	8b bb       	out	0x1b, r24	; 27
		break;
 152:	26 c0       	rjmp	.+76     	; 0x1a0 <_Z8setDigithh+0xa0>

		case 5:
		PORTA = 0x92;
 154:	82 e9       	ldi	r24, 0x92	; 146
 156:	8b bb       	out	0x1b, r24	; 27
		break;
 158:	23 c0       	rjmp	.+70     	; 0x1a0 <_Z8setDigithh+0xa0>

		case 6:
		PORTA = 0x82;
 15a:	82 e8       	ldi	r24, 0x82	; 130
 15c:	8b bb       	out	0x1b, r24	; 27
		break;
 15e:	20 c0       	rjmp	.+64     	; 0x1a0 <_Z8setDigithh+0xa0>
		
		case 7:
		PORTA = 0xF8;
 160:	88 ef       	ldi	r24, 0xF8	; 248
 162:	8b bb       	out	0x1b, r24	; 27
		break;
 164:	1d c0       	rjmp	.+58     	; 0x1a0 <_Z8setDigithh+0xa0>

		case 8:
		PORTA = 0x80;
 166:	80 e8       	ldi	r24, 0x80	; 128
 168:	8b bb       	out	0x1b, r24	; 27
		break;
 16a:	1a c0       	rjmp	.+52     	; 0x1a0 <_Z8setDigithh+0xa0>

		case 9:
		PORTA = 0x90;
 16c:	80 e9       	ldi	r24, 0x90	; 144
 16e:	8b bb       	out	0x1b, r24	; 27
		break;
 170:	17 c0       	rjmp	.+46     	; 0x1a0 <_Z8setDigithh+0xa0>
		
		case '-':      // display '-'
		PORTA = 0xBF;
 172:	8f eb       	ldi	r24, 0xBF	; 191
 174:	8b bb       	out	0x1b, r24	; 27
		break;
 176:	14 c0       	rjmp	.+40     	; 0x1a0 <_Z8setDigithh+0xa0>
		
		case '.':	  // display '.'
		PORTA = 0x7F;
 178:	8f e7       	ldi	r24, 0x7F	; 127
 17a:	8b bb       	out	0x1b, r24	; 27
		break;
 17c:	11 c0       	rjmp	.+34     	; 0x1a0 <_Z8setDigithh+0xa0>
		
		case 13:
		PORTA = 0x3F; // display '-' and '.' simultaneously
 17e:	8f e3       	ldi	r24, 0x3F	; 63
 180:	8b bb       	out	0x1b, r24	; 27
		break;
 182:	0e c0       	rjmp	.+28     	; 0x1a0 <_Z8setDigithh+0xa0>
		
		case 14:
		PORTA = 0x8C; // letter P
 184:	8c e8       	ldi	r24, 0x8C	; 140
 186:	8b bb       	out	0x1b, r24	; 27
		break;
 188:	0b c0       	rjmp	.+22     	; 0x1a0 <_Z8setDigithh+0xa0>
		
		case 15:
		PORTA = 0x86; // letter E
 18a:	86 e8       	ldi	r24, 0x86	; 134
 18c:	8b bb       	out	0x1b, r24	; 27
		break;
 18e:	08 c0       	rjmp	.+16     	; 0x1a0 <_Z8setDigithh+0xa0>
		
		case 16:
		PORTA = 0xC8; // letter N
 190:	88 ec       	ldi	r24, 0xC8	; 200
 192:	8b bb       	out	0x1b, r24	; 27
		break;
 194:	05 c0       	rjmp	.+10     	; 0x1a0 <_Z8setDigithh+0xa0>
		
		case 17:
		PORTA = 0x88;  //  letter A
 196:	88 e8       	ldi	r24, 0x88	; 136
 198:	8b bb       	out	0x1b, r24	; 27
		break;
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <_Z8setDigithh+0xa0>
		
		case 18:
		PORTA = 0xFF;  //display nothing
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	88 ec       	ldi	r24, 0xC8	; 200
 1a2:	8a 95       	dec	r24
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <_Z8setDigithh+0xa2>
		break;
	}
	
	_delay_us(600);
	clear_display();
 1a6:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z13clear_displayv>
 1aa:	08 95       	ret

000001ac <_ZN6Keypad16GetPressedButtonEv>:
 1ac:	82 e4       	ldi	r24, 0x42	; 66
 1ae:	8a 95       	dec	r24
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <_ZN6Keypad16GetPressedButtonEv+0x2>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <_ZN6Keypad16GetPressedButtonEv+0x8>
	uint8_t column_value;
	
	_delay_us(DELAY_BETWEEN_ROWS_POLLING);
	
	// FIRST ROW
	PORTD &= ~(1<<0); // 0 on first row;
 1b4:	90 98       	cbi	0x12, 0	; 18
 1b6:	92 e4       	ldi	r25, 0x42	; 66
 1b8:	9a 95       	dec	r25
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <_ZN6Keypad16GetPressedButtonEv+0xc>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <_ZN6Keypad16GetPressedButtonEv+0x12>
	_delay_us(DELAY_BETWEEN_ROWS_POLLING);

	column_value = PIND;
 1be:	80 b3       	in	r24, 0x10	; 16

	if(!(column_value & 1<<4))
 1c0:	84 fd       	sbrc	r24, 4
 1c2:	0c c0       	rjmp	.+24     	; 0x1dc <_ZN6Keypad16GetPressedButtonEv+0x30>
	{
		while(1)
		{
			if(PIND!=column_value)
 1c4:	90 b3       	in	r25, 0x10	; 16
 1c6:	89 17       	cp	r24, r25
 1c8:	e9 f3       	breq	.-6      	; 0x1c4 <_ZN6Keypad16GetPressedButtonEv+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	87 ea       	ldi	r24, 0xA7	; 167
 1cc:	91 e6       	ldi	r25, 0x61	; 97
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <_ZN6Keypad16GetPressedButtonEv+0x22>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <_ZN6Keypad16GetPressedButtonEv+0x28>
 1d4:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_1;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	08 95       	ret
	}
	else if(!(column_value & 1<<5))
 1dc:	85 fd       	sbrc	r24, 5
 1de:	0c c0       	rjmp	.+24     	; 0x1f8 <_ZN6Keypad16GetPressedButtonEv+0x4c>
	{
		while(1)
		{
			if(PIND!=column_value)
 1e0:	90 b3       	in	r25, 0x10	; 16
 1e2:	89 17       	cp	r24, r25
 1e4:	e9 f3       	breq	.-6      	; 0x1e0 <_ZN6Keypad16GetPressedButtonEv+0x34>
 1e6:	87 ea       	ldi	r24, 0xA7	; 167
 1e8:	91 e6       	ldi	r25, 0x61	; 97
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <_ZN6Keypad16GetPressedButtonEv+0x3e>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <_ZN6Keypad16GetPressedButtonEv+0x44>
 1f0:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_2;
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	08 95       	ret
	}
	else if(!(column_value & 1<<6))
 1f8:	86 fd       	sbrc	r24, 6
 1fa:	0c c0       	rjmp	.+24     	; 0x214 <_ZN6Keypad16GetPressedButtonEv+0x68>
	{
		while(1)
		{
			if(PIND!=column_value)
 1fc:	90 b3       	in	r25, 0x10	; 16
 1fe:	89 17       	cp	r24, r25
 200:	e9 f3       	breq	.-6      	; 0x1fc <_ZN6Keypad16GetPressedButtonEv+0x50>
 202:	87 ea       	ldi	r24, 0xA7	; 167
 204:	91 e6       	ldi	r25, 0x61	; 97
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <_ZN6Keypad16GetPressedButtonEv+0x5a>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <_ZN6Keypad16GetPressedButtonEv+0x60>
 20c:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_3;
 20e:	83 e0       	ldi	r24, 0x03	; 3
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	08 95       	ret
	}
	else if(!(column_value & 1<<7))
 214:	88 23       	and	r24, r24
 216:	64 f0       	brlt	.+24     	; 0x230 <_ZN6Keypad16GetPressedButtonEv+0x84>
	{
		while(1)
		{
			if(PIND!=column_value)
 218:	90 b3       	in	r25, 0x10	; 16
 21a:	89 17       	cp	r24, r25
 21c:	e9 f3       	breq	.-6      	; 0x218 <_ZN6Keypad16GetPressedButtonEv+0x6c>
 21e:	87 ea       	ldi	r24, 0xA7	; 167
 220:	91 e6       	ldi	r25, 0x61	; 97
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <_ZN6Keypad16GetPressedButtonEv+0x76>
 226:	00 c0       	rjmp	.+0      	; 0x228 <_ZN6Keypad16GetPressedButtonEv+0x7c>
 228:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_4;
 22a:	84 e0       	ldi	r24, 0x04	; 4
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	08 95       	ret
	}

	PORTD |= (1<<0); // 1 on first row;
 230:	90 9a       	sbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	92 e4       	ldi	r25, 0x42	; 66
 234:	9a 95       	dec	r25
 236:	f1 f7       	brne	.-4      	; 0x234 <_ZN6Keypad16GetPressedButtonEv+0x88>
 238:	00 c0       	rjmp	.+0      	; 0x23a <_ZN6Keypad16GetPressedButtonEv+0x8e>
	
	_delay_us(DELAY_BETWEEN_ROWS_POLLING);
	
	// SECOND ROW
	PORTD &= ~(1<<1); // 0 on second row;
 23a:	91 98       	cbi	0x12, 1	; 18
 23c:	82 e4       	ldi	r24, 0x42	; 66
 23e:	8a 95       	dec	r24
 240:	f1 f7       	brne	.-4      	; 0x23e <_ZN6Keypad16GetPressedButtonEv+0x92>
 242:	00 c0       	rjmp	.+0      	; 0x244 <_ZN6Keypad16GetPressedButtonEv+0x98>
	_delay_us(DELAY_BETWEEN_ROWS_POLLING);

	column_value = PIND;
 244:	80 b3       	in	r24, 0x10	; 16

	if(!(column_value & 1<<4))
 246:	84 fd       	sbrc	r24, 4
 248:	0c c0       	rjmp	.+24     	; 0x262 <_ZN6Keypad16GetPressedButtonEv+0xb6>
	{
		while(1)
		{
			if(PIND!=column_value)
 24a:	90 b3       	in	r25, 0x10	; 16
 24c:	89 17       	cp	r24, r25
 24e:	e9 f3       	breq	.-6      	; 0x24a <_ZN6Keypad16GetPressedButtonEv+0x9e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	87 ea       	ldi	r24, 0xA7	; 167
 252:	91 e6       	ldi	r25, 0x61	; 97
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <_ZN6Keypad16GetPressedButtonEv+0xa8>
 258:	00 c0       	rjmp	.+0      	; 0x25a <_ZN6Keypad16GetPressedButtonEv+0xae>
 25a:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_5;
 25c:	85 e0       	ldi	r24, 0x05	; 5
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	08 95       	ret
	}
	else if(!(column_value & 1<<5))
 262:	85 fd       	sbrc	r24, 5
 264:	0c c0       	rjmp	.+24     	; 0x27e <_ZN6Keypad16GetPressedButtonEv+0xd2>
	{
		while(1)
		{
			if(PIND!=column_value)
 266:	90 b3       	in	r25, 0x10	; 16
 268:	89 17       	cp	r24, r25
 26a:	e9 f3       	breq	.-6      	; 0x266 <_ZN6Keypad16GetPressedButtonEv+0xba>
 26c:	87 ea       	ldi	r24, 0xA7	; 167
 26e:	91 e6       	ldi	r25, 0x61	; 97
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <_ZN6Keypad16GetPressedButtonEv+0xc4>
 274:	00 c0       	rjmp	.+0      	; 0x276 <_ZN6Keypad16GetPressedButtonEv+0xca>
 276:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_6;
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	08 95       	ret
	}
	else if(!(column_value & 1<<6))
 27e:	86 fd       	sbrc	r24, 6
 280:	0c c0       	rjmp	.+24     	; 0x29a <_ZN6Keypad16GetPressedButtonEv+0xee>
	{
		while(1)
		{
			if(PIND!=column_value)
 282:	90 b3       	in	r25, 0x10	; 16
 284:	89 17       	cp	r24, r25
 286:	e9 f3       	breq	.-6      	; 0x282 <_ZN6Keypad16GetPressedButtonEv+0xd6>
 288:	87 ea       	ldi	r24, 0xA7	; 167
 28a:	91 e6       	ldi	r25, 0x61	; 97
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <_ZN6Keypad16GetPressedButtonEv+0xe0>
 290:	00 c0       	rjmp	.+0      	; 0x292 <_ZN6Keypad16GetPressedButtonEv+0xe6>
 292:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_7;
 294:	87 e0       	ldi	r24, 0x07	; 7
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	08 95       	ret
	}
	else if(!(column_value & 1<<7))
 29a:	88 23       	and	r24, r24
 29c:	64 f0       	brlt	.+24     	; 0x2b6 <_ZN6Keypad16GetPressedButtonEv+0x10a>
	{
		while(1)
		{
			if(PIND!=column_value)
 29e:	90 b3       	in	r25, 0x10	; 16
 2a0:	89 17       	cp	r24, r25
 2a2:	e9 f3       	breq	.-6      	; 0x29e <_ZN6Keypad16GetPressedButtonEv+0xf2>
 2a4:	87 ea       	ldi	r24, 0xA7	; 167
 2a6:	91 e6       	ldi	r25, 0x61	; 97
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <_ZN6Keypad16GetPressedButtonEv+0xfc>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <_ZN6Keypad16GetPressedButtonEv+0x102>
 2ae:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_8;
 2b0:	88 e0       	ldi	r24, 0x08	; 8
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	08 95       	ret
	}

	PORTD |= (1<<1); // 1 on second row;
 2b6:	91 9a       	sbi	0x12, 1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b8:	92 e4       	ldi	r25, 0x42	; 66
 2ba:	9a 95       	dec	r25
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <_ZN6Keypad16GetPressedButtonEv+0x10e>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <_ZN6Keypad16GetPressedButtonEv+0x114>

	_delay_us(DELAY_BETWEEN_ROWS_POLLING);

	// THIRD ROW
	PORTD &= ~(1<<2); // 0 on third row;
 2c0:	92 98       	cbi	0x12, 2	; 18
 2c2:	82 e4       	ldi	r24, 0x42	; 66
 2c4:	8a 95       	dec	r24
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <_ZN6Keypad16GetPressedButtonEv+0x118>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <_ZN6Keypad16GetPressedButtonEv+0x11e>
	_delay_us(DELAY_BETWEEN_ROWS_POLLING);

	column_value = PIND;
 2ca:	80 b3       	in	r24, 0x10	; 16

	if(!(column_value & 1<<4))
 2cc:	84 fd       	sbrc	r24, 4
 2ce:	0c c0       	rjmp	.+24     	; 0x2e8 <_ZN6Keypad16GetPressedButtonEv+0x13c>
	{
		while(1)
		{
			if(PIND!=column_value)
 2d0:	90 b3       	in	r25, 0x10	; 16
 2d2:	89 17       	cp	r24, r25
 2d4:	e9 f3       	breq	.-6      	; 0x2d0 <_ZN6Keypad16GetPressedButtonEv+0x124>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	87 ea       	ldi	r24, 0xA7	; 167
 2d8:	91 e6       	ldi	r25, 0x61	; 97
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <_ZN6Keypad16GetPressedButtonEv+0x12e>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <_ZN6Keypad16GetPressedButtonEv+0x134>
 2e0:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_9;
 2e2:	89 e0       	ldi	r24, 0x09	; 9
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	08 95       	ret
	}
	else if(!(column_value & 1<<5))
 2e8:	85 fd       	sbrc	r24, 5
 2ea:	0c c0       	rjmp	.+24     	; 0x304 <_ZN6Keypad16GetPressedButtonEv+0x158>
	{
		while(1)
		{
			if(PIND!=column_value)
 2ec:	90 b3       	in	r25, 0x10	; 16
 2ee:	89 17       	cp	r24, r25
 2f0:	e9 f3       	breq	.-6      	; 0x2ec <_ZN6Keypad16GetPressedButtonEv+0x140>
 2f2:	87 ea       	ldi	r24, 0xA7	; 167
 2f4:	91 e6       	ldi	r25, 0x61	; 97
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <_ZN6Keypad16GetPressedButtonEv+0x14a>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <_ZN6Keypad16GetPressedButtonEv+0x150>
 2fc:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_0;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	08 95       	ret
	}
	else if(!(column_value & 1<<6))
 304:	86 fd       	sbrc	r24, 6
 306:	0c c0       	rjmp	.+24     	; 0x320 <_ZN6Keypad16GetPressedButtonEv+0x174>
	{
		while(1)
		{
			if(PIND!=column_value)
 308:	90 b3       	in	r25, 0x10	; 16
 30a:	89 17       	cp	r24, r25
 30c:	e9 f3       	breq	.-6      	; 0x308 <_ZN6Keypad16GetPressedButtonEv+0x15c>
 30e:	87 ea       	ldi	r24, 0xA7	; 167
 310:	91 e6       	ldi	r25, 0x61	; 97
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <_ZN6Keypad16GetPressedButtonEv+0x166>
 316:	00 c0       	rjmp	.+0      	; 0x318 <_ZN6Keypad16GetPressedButtonEv+0x16c>
 318:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_OK;
 31a:	8b e0       	ldi	r24, 0x0B	; 11
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	08 95       	ret
	}
	else if(!(column_value & 1<<7))
 320:	88 23       	and	r24, r24
 322:	64 f0       	brlt	.+24     	; 0x33c <_ZN6Keypad16GetPressedButtonEv+0x190>
	{
		while(1)
		{
			if(PIND!=column_value)
 324:	90 b3       	in	r25, 0x10	; 16
 326:	89 17       	cp	r24, r25
 328:	e9 f3       	breq	.-6      	; 0x324 <_ZN6Keypad16GetPressedButtonEv+0x178>
 32a:	87 ea       	ldi	r24, 0xA7	; 167
 32c:	91 e6       	ldi	r25, 0x61	; 97
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <_ZN6Keypad16GetPressedButtonEv+0x182>
 332:	00 c0       	rjmp	.+0      	; 0x334 <_ZN6Keypad16GetPressedButtonEv+0x188>
 334:	00 00       	nop
			break;
		}
		_delay_ms(DELAY_AFTER_BUTTON_PRESS_DETECTED);
		return Button::BUTTON_CANCEL;
 336:	8c e0       	ldi	r24, 0x0C	; 12
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	08 95       	ret
	}

	PORTD |= (1<<2); // 0 on third row;
 33c:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33e:	92 e4       	ldi	r25, 0x42	; 66
 340:	9a 95       	dec	r25
 342:	f1 f7       	brne	.-4      	; 0x340 <_ZN6Keypad16GetPressedButtonEv+0x194>
 344:	00 c0       	rjmp	.+0      	; 0x346 <_ZN6Keypad16GetPressedButtonEv+0x19a>

	_delay_us(DELAY_BETWEEN_ROWS_POLLING);

	return Button::NO_BUTTON_PRESSED;      //reserved value meaning that input did not change
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	9f ef       	ldi	r25, 0xFF	; 255
 34a:	08 95       	ret

0000034c <main>:
#include <util/delay.h>	 //header containing delay functions
#include "functions.h"
#include "keypad.h"

int main(void)
{
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	00 d0       	rcall	.+0      	; 0x352 <main+0x6>
 352:	00 d0       	rcall	.+0      	; 0x354 <main+0x8>
 354:	1f 92       	push	r1
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
	Keypad keypad;
	
	uint8_t digitPointer = 1;
	Button pressedButton = Button::NO_BUTTON_PRESSED;
	uint8_t digitsOnDisplay[4] = {'-', '-', '-', '-'};          //table of values currently shown on 7-segment display
 35a:	8d e2       	ldi	r24, 0x2D	; 45
 35c:	8a 83       	std	Y+2, r24	; 0x02
 35e:	8b 83       	std	Y+3, r24	; 0x03
 360:	8c 83       	std	Y+4, r24	; 0x04
 362:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t code[4];											//table storing code set by admin
	uint8_t enteredCode[4];										//table storing code entered by user

	init_ports();
 364:	0e 94 65 00 	call	0xca	; 0xca <_Z10init_portsv>

int main(void)
{
	Keypad keypad;
	
	uint8_t digitPointer = 1;
 368:	11 e0       	ldi	r17, 0x01	; 1

	//UserSetsCode();

	while (1)
	{
		pressedButton = keypad.GetPressedButton();							//poll for value on keypad
 36a:	ce 01       	movw	r24, r28
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN6Keypad16GetPressedButtonEv>

		if(pressedButton != Button::NO_BUTTON_PRESSED)				//if input changed
 372:	8f 3f       	cpi	r24, 0xFF	; 255
 374:	2f ef       	ldi	r18, 0xFF	; 255
 376:	92 07       	cpc	r25, r18
 378:	79 f1       	breq	.+94     	; 0x3d8 <main+0x8c>
		{
			if(pressedButton == Button::BUTTON_CANCEL)								//if cancel button was pressed
 37a:	8c 30       	cpi	r24, 0x0C	; 12
 37c:	91 05       	cpc	r25, r1
 37e:	41 f4       	brne	.+16     	; 0x390 <main+0x44>
			{
				setValueOnWholeDisplay('-', digitsOnDisplay);
 380:	be 01       	movw	r22, r28
 382:	6e 5f       	subi	r22, 0xFE	; 254
 384:	7f 4f       	sbci	r23, 0xFF	; 255
 386:	8d e2       	ldi	r24, 0x2D	; 45
 388:	0e 94 76 00 	call	0xec	; 0xec <_Z22setValueOnWholeDisplayhPh>
				digitPointer = 1;
 38c:	11 e0       	ldi	r17, 0x01	; 1
				continue;
 38e:	ed cf       	rjmp	.-38     	; 0x36a <main+0x1e>
			}
			
			if(digitPointer == 5 && pressedButton == Button::BUTTON_OK)						//if 4 digits were entered and OK button was pressed
 390:	15 30       	cpi	r17, 0x05	; 5
 392:	d1 f4       	brne	.+52     	; 0x3c8 <main+0x7c>
 394:	8b 30       	cpi	r24, 0x0B	; 11
 396:	91 05       	cpc	r25, r1
 398:	b9 f4       	brne	.+46     	; 0x3c8 <main+0x7c>
			{
				code[0] = digitsOnDisplay[0];
 39a:	ca 80       	ldd	r12, Y+2	; 0x02
				code[1] = digitsOnDisplay[1];
 39c:	bb 80       	ldd	r11, Y+3	; 0x03
				code[2] = digitsOnDisplay[2];
 39e:	9c 80       	ldd	r9, Y+4	; 0x04
				code[3] = digitsOnDisplay[3];
 3a0:	ad 80       	ldd	r10, Y+5	; 0x05
			setValueOnWholeDisplay('-', digitsOnDisplay);
			digitPointer = 1;
		}
	}
	
	setValueOnWholeDisplay(13, digitsOnDisplay);										//set display to '-.' in locked state
 3a2:	be 01       	movw	r22, r28
 3a4:	6e 5f       	subi	r22, 0xFE	; 254
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255
 3a8:	8d e0       	ldi	r24, 0x0D	; 13
 3aa:	0e 94 76 00 	call	0xec	; 0xec <_Z22setValueOnWholeDisplayhPh>

	digitPointer = 1;
 3ae:	11 e0       	ldi	r17, 0x01	; 1
					break;
				}
				
				else
				{
					digitsOnDisplay[0] = 8;   //B
 3b0:	68 94       	set
 3b2:	dd 24       	eor	r13, r13
 3b4:	d3 f8       	bld	r13, 3
					digitsOnDisplay[1] = 17;  //A
 3b6:	0f 2e       	mov	r0, r31
 3b8:	f1 e1       	ldi	r31, 0x11	; 17
 3ba:	ef 2e       	mov	r14, r31
 3bc:	f0 2d       	mov	r31, r0
					digitsOnDisplay[2] = 0;   //D
					digitsOnDisplay[3] = 18;  //nothing
 3be:	0f 2e       	mov	r0, r31
 3c0:	f2 e1       	ldi	r31, 0x12	; 18
 3c2:	ff 2e       	mov	r15, r31
 3c4:	f0 2d       	mov	r31, r0
 3c6:	23 c0       	rjmp	.+70     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
				code[2] = digitsOnDisplay[2];
				code[3] = digitsOnDisplay[3];
				break;
			}
			
			digitsOnDisplay[digitPointer-1] = static_cast<uint8_t>(pressedButton);
 3c8:	e1 e0       	ldi	r30, 0x01	; 1
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	ec 0f       	add	r30, r28
 3ce:	fd 1f       	adc	r31, r29
 3d0:	e1 0f       	add	r30, r17
 3d2:	f1 1d       	adc	r31, r1
 3d4:	80 83       	st	Z, r24
			digitPointer++;
 3d6:	1f 5f       	subi	r17, 0xFF	; 255
		}

		if(digitPointer < 6)
 3d8:	16 30       	cpi	r17, 0x06	; 6
 3da:	88 f4       	brcc	.+34     	; 0x3fe <main+0xb2>
		{
			setDigit(digitsOnDisplay[0], 1);
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	8a 81       	ldd	r24, Y+2	; 0x02
 3e0:	0e 94 80 00 	call	0x100	; 0x100 <_Z8setDigithh>
			setDigit(digitsOnDisplay[1], 2);
 3e4:	62 e0       	ldi	r22, 0x02	; 2
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	0e 94 80 00 	call	0x100	; 0x100 <_Z8setDigithh>
			setDigit(digitsOnDisplay[2], 3);
 3ec:	63 e0       	ldi	r22, 0x03	; 3
 3ee:	8c 81       	ldd	r24, Y+4	; 0x04
 3f0:	0e 94 80 00 	call	0x100	; 0x100 <_Z8setDigithh>
			setDigit(digitsOnDisplay[3], 4);
 3f4:	64 e0       	ldi	r22, 0x04	; 4
 3f6:	8d 81       	ldd	r24, Y+5	; 0x05
 3f8:	0e 94 80 00 	call	0x100	; 0x100 <_Z8setDigithh>
 3fc:	b6 cf       	rjmp	.-148    	; 0x36a <main+0x1e>
		}
		else
		{
			setValueOnWholeDisplay('-', digitsOnDisplay);
 3fe:	be 01       	movw	r22, r28
 400:	6e 5f       	subi	r22, 0xFE	; 254
 402:	7f 4f       	sbci	r23, 0xFF	; 255
 404:	8d e2       	ldi	r24, 0x2D	; 45
 406:	0e 94 76 00 	call	0xec	; 0xec <_Z22setValueOnWholeDisplayhPh>
			digitPointer = 1;
 40a:	11 e0       	ldi	r17, 0x01	; 1
 40c:	ae cf       	rjmp	.-164    	; 0x36a <main+0x1e>
	long int del = 0;

	//COMPARING ENTERED CODE WITH CODE SET BEFORE
	while (1)
	{
		pressedButton = keypad.GetPressedButton();							//poll for value on keypad
 40e:	ce 01       	movw	r24, r28
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN6Keypad16GetPressedButtonEv>

		if(pressedButton != Button::NO_BUTTON_PRESSED)									//if input changed
 416:	8f 3f       	cpi	r24, 0xFF	; 255
 418:	2f ef       	ldi	r18, 0xFF	; 255
 41a:	92 07       	cpc	r25, r18
 41c:	09 f4       	brne	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41e:	56 c0       	rjmp	.+172    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		{
			if(pressedButton == Button::BUTTON_CANCEL)								//if cancel button was pressed
 420:	8c 30       	cpi	r24, 0x0C	; 12
 422:	91 05       	cpc	r25, r1
 424:	41 f4       	brne	.+16     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			{
				setValueOnWholeDisplay(13, digitsOnDisplay);
 426:	be 01       	movw	r22, r28
 428:	6e 5f       	subi	r22, 0xFE	; 254
 42a:	7f 4f       	sbci	r23, 0xFF	; 255
 42c:	8d e0       	ldi	r24, 0x0D	; 13
 42e:	0e 94 76 00 	call	0xec	; 0xec <_Z22setValueOnWholeDisplayhPh>
				digitPointer=1;
 432:	11 e0       	ldi	r17, 0x01	; 1
				continue;
 434:	ec cf       	rjmp	.-40     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			}
			
			if(digitPointer==5 && pressedButton == Button::BUTTON_OK)						//if 4 digits were entered and OK button was pressed
 436:	15 30       	cpi	r17, 0x05	; 5
 438:	09 f0       	breq	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 43a:	40 c0       	rjmp	.+128    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 43c:	8b 30       	cpi	r24, 0x0B	; 11
 43e:	91 05       	cpc	r25, r1
 440:	e9 f5       	brne	.+122    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
				enteredCode[0] = digitsOnDisplay[0];
				enteredCode[1] = digitsOnDisplay[1];
				enteredCode[2] = digitsOnDisplay[2];
				enteredCode[3] = digitsOnDisplay[3];
				
				if(enteredCode[0]==code[0] && enteredCode[1]==code[1] && enteredCode[2]==code[2] && enteredCode[3]==code[3]) //check if code is correct
 442:	8a 81       	ldd	r24, Y+2	; 0x02
 444:	c8 12       	cpse	r12, r24
 446:	11 c0       	rjmp	.+34     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 448:	8b 81       	ldd	r24, Y+3	; 0x03
 44a:	b8 12       	cpse	r11, r24
 44c:	0e c0       	rjmp	.+28     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 44e:	8c 81       	ldd	r24, Y+4	; 0x04
 450:	98 12       	cpse	r9, r24
 452:	0b c0       	rjmp	.+22     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 454:	8d 81       	ldd	r24, Y+5	; 0x05
 456:	a8 12       	cpse	r10, r24
 458:	08 c0       	rjmp	.+16     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
				{
					digitsOnDisplay[0] = 0; //O
 45a:	1a 82       	std	Y+2, r1	; 0x02
					digitsOnDisplay[1] = 14;//P
 45c:	8e e0       	ldi	r24, 0x0E	; 14
 45e:	8b 83       	std	Y+3, r24	; 0x03
					digitsOnDisplay[2] = 15;//E
 460:	8f e0       	ldi	r24, 0x0F	; 15
 462:	8c 83       	std	Y+4, r24	; 0x04
					digitsOnDisplay[3] = 16;//N
 464:	80 e1       	ldi	r24, 0x10	; 16
 466:	8d 83       	std	Y+5, r24	; 0x05
					break;
 468:	4c c0       	rjmp	.+152    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
				}
				
				else
				{
					digitsOnDisplay[0] = 8;   //B
 46a:	da 82       	std	Y+2, r13	; 0x02
					digitsOnDisplay[1] = 17;  //A
 46c:	eb 82       	std	Y+3, r14	; 0x03
					digitsOnDisplay[2] = 0;   //D
 46e:	1c 82       	std	Y+4, r1	; 0x04
					digitsOnDisplay[3] = 18;  //nothing
 470:	fd 82       	std	Y+5, r15	; 0x05
 472:	00 e0       	ldi	r16, 0x00	; 0
 474:	10 e0       	ldi	r17, 0x00	; 0
					
					while(1)
					{
						setDigit(digitsOnDisplay[0], 1);
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	8a 81       	ldd	r24, Y+2	; 0x02
 47a:	0e 94 80 00 	call	0x100	; 0x100 <_Z8setDigithh>
						setDigit(digitsOnDisplay[1], 2);
 47e:	62 e0       	ldi	r22, 0x02	; 2
 480:	8b 81       	ldd	r24, Y+3	; 0x03
 482:	0e 94 80 00 	call	0x100	; 0x100 <_Z8setDigithh>
						setDigit(digitsOnDisplay[2], 3);
 486:	63 e0       	ldi	r22, 0x03	; 3
 488:	8c 81       	ldd	r24, Y+4	; 0x04
 48a:	0e 94 80 00 	call	0x100	; 0x100 <_Z8setDigithh>
						setDigit(digitsOnDisplay[3], 4);
 48e:	64 e0       	ldi	r22, 0x04	; 4
 490:	8d 81       	ldd	r24, Y+5	; 0x05
 492:	0e 94 80 00 	call	0x100	; 0x100 <_Z8setDigithh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 496:	81 ee       	ldi	r24, 0xE1	; 225
 498:	94 e0       	ldi	r25, 0x04	; 4
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 4a0:	00 00       	nop
 4a2:	0f 5f       	subi	r16, 0xFF	; 255
 4a4:	1f 4f       	sbci	r17, 0xFF	; 255
						
						_delay_ms(5);
						del++;

						if(del >= 200) //if about 1 second passed
 4a6:	08 3c       	cpi	r16, 0xC8	; 200
 4a8:	11 05       	cpc	r17, r1
 4aa:	29 f7       	brne	.-54     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
						{
							del = 0;	 //reset delay cycles counter
							setValueOnWholeDisplay(13, digitsOnDisplay);
 4ac:	be 01       	movw	r22, r28
 4ae:	6e 5f       	subi	r22, 0xFE	; 254
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	8d e0       	ldi	r24, 0x0D	; 13
 4b4:	0e 94 76 00 	call	0xec	; 0xec <_Z22setValueOnWholeDisplayhPh>
							digitPointer = 1;	 //reset iterator
 4b8:	11 e0       	ldi	r17, 0x01	; 1
							break;
						}
					}
					continue;
 4ba:	a9 cf       	rjmp	.-174    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
				}
			}
			digitsOnDisplay[digitPointer-1] = static_cast<uint8_t>(pressedButton);
 4bc:	e1 e0       	ldi	r30, 0x01	; 1
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	ec 0f       	add	r30, r28
 4c2:	fd 1f       	adc	r31, r29
 4c4:	e1 0f       	add	r30, r17
 4c6:	f1 1d       	adc	r31, r1
 4c8:	80 83       	st	Z, r24
			digitPointer++;
 4ca:	1f 5f       	subi	r17, 0xFF	; 255
		}

		if(digitPointer<6)
 4cc:	16 30       	cpi	r17, 0x06	; 6
 4ce:	88 f4       	brcc	.+34     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
		{
			setDigit(digitsOnDisplay[0],1);
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	8a 81       	ldd	r24, Y+2	; 0x02
 4d4:	0e 94 80 00 	call	0x100	; 0x100 <_Z8setDigithh>
			setDigit(digitsOnDisplay[1],2);
 4d8:	62 e0       	ldi	r22, 0x02	; 2
 4da:	8b 81       	ldd	r24, Y+3	; 0x03
 4dc:	0e 94 80 00 	call	0x100	; 0x100 <_Z8setDigithh>
			setDigit(digitsOnDisplay[2],3);
 4e0:	63 e0       	ldi	r22, 0x03	; 3
 4e2:	8c 81       	ldd	r24, Y+4	; 0x04
 4e4:	0e 94 80 00 	call	0x100	; 0x100 <_Z8setDigithh>
			setDigit(digitsOnDisplay[3],4);
 4e8:	64 e0       	ldi	r22, 0x04	; 4
 4ea:	8d 81       	ldd	r24, Y+5	; 0x05
 4ec:	0e 94 80 00 	call	0x100	; 0x100 <_Z8setDigithh>
 4f0:	8e cf       	rjmp	.-228    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		}

		else
		{
			setValueOnWholeDisplay('-', digitsOnDisplay);
 4f2:	be 01       	movw	r22, r28
 4f4:	6e 5f       	subi	r22, 0xFE	; 254
 4f6:	7f 4f       	sbci	r23, 0xFF	; 255
 4f8:	8d e2       	ldi	r24, 0x2D	; 45
 4fa:	0e 94 76 00 	call	0xec	; 0xec <_Z22setValueOnWholeDisplayhPh>
			digitPointer = 1;
 4fe:	11 e0       	ldi	r17, 0x01	; 1
 500:	86 cf       	rjmp	.-244    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		}
	}
	
	while(1)
	{
		setDigit(digitsOnDisplay[0], 1);
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	8a 81       	ldd	r24, Y+2	; 0x02
 506:	0e 94 80 00 	call	0x100	; 0x100 <_Z8setDigithh>
		setDigit(digitsOnDisplay[1], 2);
 50a:	62 e0       	ldi	r22, 0x02	; 2
 50c:	8b 81       	ldd	r24, Y+3	; 0x03
 50e:	0e 94 80 00 	call	0x100	; 0x100 <_Z8setDigithh>
		setDigit(digitsOnDisplay[2], 3);
 512:	63 e0       	ldi	r22, 0x03	; 3
 514:	8c 81       	ldd	r24, Y+4	; 0x04
 516:	0e 94 80 00 	call	0x100	; 0x100 <_Z8setDigithh>
		setDigit(digitsOnDisplay[3], 4);
 51a:	64 e0       	ldi	r22, 0x04	; 4
 51c:	8d 81       	ldd	r24, Y+5	; 0x05
 51e:	0e 94 80 00 	call	0x100	; 0x100 <_Z8setDigithh>
 522:	ef cf       	rjmp	.-34     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>

00000524 <__tablejump2__>:
 524:	ee 0f       	add	r30, r30
 526:	ff 1f       	adc	r31, r31
 528:	05 90       	lpm	r0, Z+
 52a:	f4 91       	lpm	r31, Z
 52c:	e0 2d       	mov	r30, r0
 52e:	09 94       	ijmp

00000530 <_exit>:
 530:	f8 94       	cli

00000532 <__stop_program>:
 532:	ff cf       	rjmp	.-2      	; 0x532 <__stop_program>
